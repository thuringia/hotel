import React from "react";
import PropTypes from "prop-types";
import { connect } from "react-redux";
{{#if wantReduxForm}}
import { reduxForm } from "redux-form/immutable";
{{/if}}
import { createStructuredSelector } from "reselect";

import { injectI18n } from "utils/i18n";
import bindActionCreators from "utils/bindActionCreators";

import { actionCreators } from "./duck";
import makeSelect{{properCase name}} from "./selectors";
{{#if wantMessages}}
import messages from "./messages";
{{/if}}

class {{ properCase name }} extends React.{{{ component }}} {
  static propTypes = {
    actions: PropTypes.object.isRequired,
    config: PropTypes.shape({
      id: PropTypes.string.isRequired
    }).isRequired,
    i18n: PropTypes.func.isRequired,
    {{#if wantReduxForm}}
    handleSubmit: PropTypes.func.isRequired,
    {{/if}}
  };

  render() {
    const {
      actions,
      i18n,
      {{#if wantReduxForm}}
      handleSubmit
      {{/if}}
    } = this.props;

    return (
      {{#if wantReduxForm}}
      <form onSubmit={handleSubmit}>
      </form>
      {{else}}
      <div />
      {{/if}}
    );
  }
}

const mapStateToProps = id => makeSelect{{properCase name}}(id);

const mapDispatchToProps = bindActionCreators;

const Connected = id =>
  connect(mapStateToProps(id), mapDispatchToProps(actionCreators, id))(
    {{properCase name}}
  );

{{#if wantReduxForm}}
const ConnectedWithForm = id => reduxForm({ form: id })(Connected(id));

export default id => injectI18n(ConnectedWithForm(id));
{{else}}
export default id => injectI18n(Connected(id));
{{/if}}
