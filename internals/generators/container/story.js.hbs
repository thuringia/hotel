import { combineReducers } from "redux-immutable";
import React from "react";

import { getAsyncInjectors } from "utils/asyncInjectors";
import {{ properCase name }} from "containers/{{ properCase name }}";

const { injectReducer, injectSagas } = getAsyncInjectors(window.store);

const className = "dcep-{{ kebabCase name }}";
const name = "{{ properCase name }}";

const config = {
  id: `${className}-unique`
};

class Story extends React.Component {
  state = {
    loading: true
  };

  componentWillMount() {
    Promise.all([
      import(`containers/${name}/duck.js`).then(({ reducerWithConfig }) =>
        injectReducer(
          name,
          combineReducers({
            [config.id]: reducerWithConfig(config)
          })
        )
      ),
      import(`containers/${name}/sagas.js`).then(({ default: sagas }) =>
        injectSagas(sagas)
      )
    ]).then(() => this.setState({ loading: false }));
  }

  render() {
    if (this.state.loading) return <div>Loading...</div>;
    return React.createElement({{ properCase name }}(config.id));
  }
}

export default container => {
  container.add(name, () => <Story />);
};